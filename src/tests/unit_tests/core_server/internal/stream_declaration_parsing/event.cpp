#include <ANTLRInputStream.h>
#include <CommonTokenStream.h>
#include <tree/ParseTree.h>

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_vector.hpp>
#include <string>

#include "core_server/internal/parsing/stream_declaration/autogenerated/StreamDeclarationLexer.h"
#include "core_server/internal/parsing/stream_declaration/autogenerated/StreamDeclarationParser.h"
#include "core_server/internal/parsing/stream_declaration/visitors/event_visitor.hpp"
#include "shared/datatypes/catalog/datatypes.hpp"
#include "shared/datatypes/parsing/event_info_parsed.hpp"

namespace CORE::Internal::CEQL::UnitTests {

Types::EventInfoParsed parse_event(std::string stream) {
  antlr4::ANTLRInputStream input(stream);
  StreamDeclarationLexer lexer(&input);
  antlr4::CommonTokenStream tokens(&lexer);
  StreamDeclarationParser parser(&tokens);
  antlr4::tree::ParseTree* tree = parser.parse();
  Parsing::Declaration::EventVisitor event_visitor;
  event_visitor.visit(tree);
  return event_visitor.get_parsed_event();
}

TEST_CASE("Correct event visitor parsing") {
  std::string stream =
    "CREATE STREAM MySensor {\n"
    "EVENT Temp { ID:int, Value1:string, Value2:boolean }\n"
    "}";
  Types::EventInfoParsed event = parse_event(stream);

  REQUIRE(event.name == "Temp");
  REQUIRE(event.attributes_info[0].name == "ID");
  REQUIRE(event.attributes_info[0].value_type == Types::ValueTypes::INT64);

  REQUIRE(event.attributes_info[1].name == "Value1");
  REQUIRE(event.attributes_info[1].value_type == Types::ValueTypes::STRING_VIEW);

  REQUIRE(event.attributes_info[2].name == "Value2");
  REQUIRE(event.attributes_info[2].value_type == Types::ValueTypes::BOOL);
}
}  // namespace CORE::Internal::CEQL::UnitTests
