#pragma once

#include <antlr4-runtime.h>

#include <string>

#include "antlr4-runtime.h"
#include "autogenerated/CEQLQueryLexer.h"
#include "autogenerated/CEQLQueryParser.h"
#include "core_server/internal/ceql/query/query.hpp"
#include "core_server/internal/coordination/catalog.hpp"
#include "core_server/internal/parsing/ceql_query/visitors/partition_by_visitor.hpp"
#include "core_server/internal/parsing/error_listener.hpp"
#include "error_handling_utils.hpp"
#include "visitors/consume_visitor.hpp"
#include "visitors/from_visitor.hpp"
#include "visitors/limit_visitor.hpp"
#include "visitors/select_visitor.hpp"
#include "visitors/where_visitor.hpp"
#include "visitors/within_visitor.hpp"

namespace CORE::Internal::Parsing {

class PartitionByVisitor;

class QueryParser {
 public:
  // TODO: Refactor the duplicate code
  static CEQL::Query parse_query(std::string query, Catalog& catalog) {
    // TODO finish this.
    // Convert the input string to a stream
    antlr4::ANTLRInputStream input(query);

    // Use the ANTLR input stream to create a lexer
    CEQLQueryLexer lexer(&input);

    // Use the lexer to create a token stream
    antlr4::CommonTokenStream tokens(&lexer);

    // Use the token stream to create a parser
    CEQLQueryParser parser(&tokens);

    // Add error listener for parsing errors
    parser.removeErrorListeners();
    antlr4::ParseErrorListener error_listener;
    parser.addErrorListener(&error_listener);

    // Parse the input
    antlr4::tree::ParseTree* tree = parser.parse();

    FromVisitor from_visitor(catalog);
    from_visitor.visit(tree);
    CEQL::From from = from_visitor.get_parsed_from();
    std::set<std::string>& streams = from.streams;
    std::map<std::string, std::vector<Types::EventInfo>>
      streams_events = get_streams_events_map(catalog, streams);

    SelectVisitor select_visitor;
    select_visitor.visit(tree);
    CEQL::Select select = select_visitor.get_parsed_select();

    WhereVisitorCatalog where_visitor(catalog, streams_events);
    where_visitor.visit(tree);
    CEQL::Where where = where_visitor.get_parsed_where();

    PartitionByVisitor partition_by_visitor;
    partition_by_visitor.visit(tree);
    CEQL::PartitionBy partition_by = partition_by_visitor.get_parsed_partition_by();

    WithinVisitor within_visitor;
    within_visitor.visit(tree);
    CEQL::Within within = within_visitor.get_parsed_within();

    ConsumeByVisitor consume_visitor;
    consume_visitor.visit(tree);
    CEQL::ConsumeBy consume = consume_visitor.get_parsed_consume();

    LimitVisitor limit_visitor;
    limit_visitor.visit(tree);
    CEQL::Limit limit = limit_visitor.get_parsed_limit();

    return {std::move(select),
            std::move(from),
            std::move(where),
            std::move(partition_by),
            std::move(within),
            std::move(consume),
            std::move(limit)};
  }
};

}  // namespace CORE::Internal::Parsing
