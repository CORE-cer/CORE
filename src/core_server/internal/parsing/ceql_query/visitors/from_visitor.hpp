#pragma once

#include <iostream>

#include "core_server/internal/ceql/query/from.hpp"
#include "core_server/internal/coordination/catalog.hpp"
#include "core_server/internal/parsing/ceql_query/autogenerated/CEQLQueryParserBaseVisitor.h"
#include "shared/exceptions/stream_not_found_exception.hpp"

namespace CORE::Internal::Parsing {
class FromVisitorCatalog : public CEQLQueryParserBaseVisitor {
 private:
  std::set<std::string> streams;
  Catalog& catalog;

  void check_if_streams_names_are_in_catalog() {
    const std::set<std::string>& stream_names = catalog.get_stream_names();
    for (std::string stream : streams) {
      auto it = stream_names.find(stream);
      if (it == stream_names.end()) {
        throw CORE::StreamNotFoundException("The stream_name: " + stream
                                            + " is not in the catalog");
      }
    }
  }

 public:
  FromVisitorCatalog(Catalog& catalog) : catalog(catalog) {}

  CEQL::From get_parsed_from_catalog() {
    check_if_streams_names_are_in_catalog();
    return CEQL::From(std::move(streams));
  }

  virtual std::any visitCore_query(CEQLQueryParser::Core_queryContext* ctx) override {
    // Visiting From clause will identify all streams.
    auto from_ctx = ctx->from_clause();
    if (from_ctx) {
      visit(from_ctx);
    }
    return {};  // Only interested in stream names
  }

  virtual std::any visitStream_name(CEQLQueryParser::Stream_nameContext* ctx) override {
    streams.insert(ctx->getText());
    return {};
  }
};

// TODO: Refactor this
class FromVisitor : public CEQLQueryParserBaseVisitor {
 private:
  std::set<std::string> streams;

 public:
  CEQL::From get_parsed_from() { return CEQL::From(std::move(streams)); }

  virtual std::any visitCore_query(CEQLQueryParser::Core_queryContext* ctx) override {
    // Visiting From clause will identify all streams.
    auto from_ctx = ctx->from_clause();
    if (from_ctx) {
      visit(from_ctx);
    }
    return {};  // Only interested in stream names
  }

  virtual std::any visitStream_name(CEQLQueryParser::Stream_nameContext* ctx) override {
    streams.insert(ctx->getText());
    return {};
  }
};
}  // namespace CORE::Internal::Parsing
