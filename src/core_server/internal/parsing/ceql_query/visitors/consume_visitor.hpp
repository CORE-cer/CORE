#pragma once

#include <any>

#include "core_server/internal/ceql/query/consume_by.hpp"
#include "core_server/internal/parsing/ceql_query/autogenerated/CEQLQueryParser.h"
#include "core_server/internal/parsing/ceql_query/autogenerated/CEQLQueryParserBaseVisitor.h"

namespace CORE::Internal::Parsing {
class ConsumeByVisitor : public CEQLQueryParserBaseVisitor {
 private:
  // Default
  CEQL::ConsumeBy::ConsumptionPolicy policy = CEQL::ConsumeBy::ConsumptionPolicy::NONE;

 public:
  CEQL::ConsumeBy get_parsed_consume() { return CEQL::ConsumeBy(policy); }

  virtual std::any visitCore_query(CEQLQueryParser::Core_queryContext* ctx) override {
    auto consumption_policy = ctx->consumption_policy();
    if (consumption_policy) {
      visit(consumption_policy);
    }
    return {};  // Only interested in stream names
  }

  virtual std::any visitCp_any(CEQLQueryParser::Cp_anyContext* ctx) override {
    policy = CEQL::ConsumeBy::ConsumptionPolicy::ANY;
    return {};
  }

  virtual std::any visitCp_partition(CEQLQueryParser::Cp_partitionContext* ctx) override {
    policy = CEQL::ConsumeBy::ConsumptionPolicy::PARTITION;
    return {};
  }

  virtual std::any visitCp_none(CEQLQueryParser::Cp_noneContext* ctx) override {
    policy = CEQL::ConsumeBy::ConsumptionPolicy::NONE;
    return {};
  }
};
}  // namespace CORE::Internal::Parsing
