#pragma once

#include <any>
#include <set>
#include <string>

#include "core_server/internal/interface/modules/quarantine/quarantine_policies/quarantine_policy_type.hpp"
#include "core_server/internal/parsing/option_declaration/autogenerated/OptionDeclarationParser.h"
#include "core_server/internal/parsing/option_declaration/autogenerated/OptionDeclarationParserBaseVisitor.h"

namespace CORE::Internal::Parsing::Option {
class QuarantineOptionVisitor : public OptionDeclarationParserBaseVisitor {
 public:
  Interface::Module::Quarantine::QuarantinePolicyType policy_type;
  std::set<std::string> streams;

  virtual std::any
  visitFixed_time_policy(OptionDeclarationParser::Fixed_time_policyContext* ctx) override {
    policy_type = Interface::Module::Quarantine::QuarantinePolicyType::WaitFixedTimePolicy;
    return {};
  }

  virtual std::any
  visitDirect_policy(OptionDeclarationParser::Direct_policyContext* ctx) override {
    policy_type = Interface::Module::Quarantine::QuarantinePolicyType::DirectPolicy;
    return {};
  }

  virtual std::any
  visitStream_name(OptionDeclarationParser::Stream_nameContext* ctx) override {
    streams.insert(ctx->getText());
    return {};
  }
};
}  // namespace CORE::Internal::Parsing::Option
