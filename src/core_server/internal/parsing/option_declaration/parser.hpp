#pragma once

#include <ANTLRInputStream.h>
#include <CommonTokenStream.h>
#include <tree/ParseTree.h>

#include <set>
#include <string>
#include <utility>

#include "core_server/internal/interface/backend.hpp"
#include "core_server/internal/interface/modules/quarantine/quarantine_policies/quarantine_policy_type.hpp"
#include "core_server/internal/parsing/option_declaration/autogenerated/OptionDeclarationLexer.h"
#include "core_server/internal/parsing/option_declaration/autogenerated/OptionDeclarationParser.h"
#include "core_server/internal/parsing/option_declaration/visitors/quarantine_option_visitor.hpp"

namespace CORE::Internal::Parsing::Option {

class OptionsParser {
  using Backend = CORE::Internal::Interface::Backend<false>;

 public:
  static void parse_option(std::string option, Backend& backend) {
    // Convert the input string to a stream
    antlr4::ANTLRInputStream input(option);

    // Use the ANTLR input stream to create a lexer
    OptionDeclarationLexer lexer(&input);

    // Use the lexer to create a token stream
    antlr4::CommonTokenStream tokens(&lexer);

    // Use the token stream to create a parser
    OptionDeclarationParser parser(&tokens);

    // Parse the input
    antlr4::tree::ParseTree* tree = parser.parse();

    Option::QuarantineOptionVisitor quarantine_option_visitor;

    quarantine_option_visitor.visit(tree);

    Interface::Module::Quarantine::QuarantinePolicy::QuarantinePolicyType
      policy_type = quarantine_option_visitor.policy_type;

    std::set<std::string> streams = quarantine_option_visitor.streams;

    Interface::Module::Quarantine::QuarantinePolicy quarantine_policy =
      {policy_type, streams, quarantine_option_visitor.time_window};

    backend.set_quarantine_policy(std::move(quarantine_policy));
  }
};
}  // namespace CORE::Internal::Parsing::Option
